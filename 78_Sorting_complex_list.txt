78_Sorting_complex_list-
********************************************************
To sort a list of complex types ,complex type has to implement Icomparable interface and provide implementation for CompareTo() method.

compareto method return an integer
if value> 0 then current objct greater than value being compared.

<0 - the current vlaue is less

=0- is equal to object compared.

CODE-

using System;
using System.Collections.Generic;



class Program
{
    public static void Main()
    {
        Customer c1 = new Customer() { Id = 100, Name = "Gaurav", Salary = 12345 };
        Customer c2 = new Customer() { Id = 101, Name = "Nisha", Salary = 500001 };
        Customer c3 = new Customer() { Id = 102, Name = "Ravi", Salary = 12345 };
        Customer c4 = new Customer() { Id = 103, Name = "Dheeraj", Salary = 12345 };
        Customer c5 = new Customer() { Id = 104, Name = "Rocky", Salary = 5000000 };
        Customer c6 = new Customer() { Id = 105, Name = "Denver", Salary = 5000000 };
        Customer c7 = new Customer() { Id = 106, Name = "Jimmy", Salary = 5000000 };

        List<Customer> custlist = new List<Customer>();
        custlist.Add(c1);
        custlist.Add(c2);
        custlist.Add(c3);
        custlist.Add(c4);
        custlist.Add(c5);

        Console.WriteLine("Before sorting");

        foreach (Customer c in custlist)
        {
            Console.WriteLine(c.Salary);
        }


        custlist.Sort();

        Console.WriteLine("After sorting");

        foreach (Customer c in custlist)
        {
            Console.WriteLine(c.Salary);
        }




    }
}

class Customer :IComparable<Customer>//Inheriting from Icomparable interface
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int Salary { get; set; }

    public int CompareTo(Customer other)//implementing the method.
    {
        if (this.Salary > other.Salary)
        {
            return 1;
        }
        else if (this.Salary < other.Salary)
        {
            return -1;
        }

        else return 0;

    }
}


***********************************************************

We can use this code also in place of that-


    public int CompareTo(Customer other)
    {
        //if (this.Salary > other.Salary)
        //{
        //    return 1;
        //}
        //else if (this.Salary < other.Salary)
        //{
        //    return -1;
        //}

        //else return 0;

        return this.Salary.CompareTo(other.Salary);//compare to is implemeted by salary.

    }

********************************************************************************

Sorting on the basis of Name-


using System;
using System.Collections.Generic;



class Program
{
    public static void Main()
    {
        Customer c1 = new Customer() { Id = 100, Name = "Gaurav", Salary = 12345 };
        Customer c2 = new Customer() { Id = 101, Name = "Nisha", Salary = 500001 };
        Customer c3 = new Customer() { Id = 102, Name = "Ravi", Salary = 12345 };
        Customer c4 = new Customer() { Id = 103, Name = "Dheeraj", Salary = 12345 };
        Customer c5 = new Customer() { Id = 104, Name = "Rocky", Salary = 5000000 };
        Customer c6 = new Customer() { Id = 105, Name = "Denver", Salary = 5000000 };
        Customer c7 = new Customer() { Id = 106, Name = "Jimmy", Salary = 5000000 };

        List<Customer> custlist = new List<Customer>();
        custlist.Add(c1);
        custlist.Add(c2);
        custlist.Add(c3);
        custlist.Add(c4);
        custlist.Add(c5);

        Console.WriteLine("Before sorting");

        foreach (Customer c in custlist)
        {
            Console.WriteLine(c.Name);
        }


        custlist.Sort();

        Console.WriteLine("After sorting");

        foreach (Customer c in custlist)
        {
            Console.WriteLine(c.Name);
        }




    }
}

class Customer :IComparable<Customer>
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int Salary { get; set; }

    public int CompareTo(Customer other)
    {
        //if (this.Salary > other.Salary)
        //{
        //    return 1;
        //}
        //else if (this.Salary < other.Salary)
        //{
        //    return -1;
        //}

        //else return 0;

        return this.Name.CompareTo(other.Name);

    }
}

_____________________________________________________________________

Note-

If you dont prefer to use the sort functionaity provided by the class then provde your on functionlity by implementing the ICOMPARABLE INTERFACE.

Using Imcomaraer Interface-


using System;
using System.Collections.Generic;



class Program
{
    public static void Main()
    {
        Customer c1 = new Customer() { Id = 100, Name = "Gaurav", Salary = 12345 };
        Customer c2 = new Customer() { Id = 101, Name = "Nisha", Salary = 500001 };
        Customer c3 = new Customer() { Id = 102, Name = "Ravi", Salary = 12345 };
        Customer c4 = new Customer() { Id = 103, Name = "Dheeraj", Salary = 12345 };
        Customer c5 = new Customer() { Id = 104, Name = "Rocky", Salary = 5000000 };
        Customer c6 = new Customer() { Id = 105, Name = "Denver", Salary = 5000000 };
        Customer c7 = new Customer() { Id = 106, Name = "Jimmy", Salary = 5000000 };

        List<Customer> custlist = new List<Customer>();
        custlist.Add(c1);
        custlist.Add(c2);
        custlist.Add(c3);
        custlist.Add(c4);
        custlist.Add(c5);


        sortbyname srt = new sortbyname();

        Console.WriteLine("Before sorting");

        foreach (Customer c in custlist)
        {
            Console.WriteLine(c.Name);
        }


        custlist.Sort(srt);//passing instance of that class

        Console.WriteLine("After sorting");

        foreach (Customer c in custlist)
        {
            Console.WriteLine(c.Name);
        }



    }
}

public class sortbyname : IComparer<Customer>//creating a class that implemnts Icompare interface
{
  public  int Compare(Customer x, Customer y)
    {
        return x.Name.CompareTo(y.Name);
    }
}

public class Customer 
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int Salary { get; set; }

  
}




